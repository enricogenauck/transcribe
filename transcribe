#!/usr/bin/env bash

#### Set up temp directory for conversion output
tmp_dir=$(mktemp -d -t transcribe.XXXXXX)
function cleanup {
  rm -rf "$tmp_dir"
}
trap cleanup EXIT

#### Helper functions
function is_type() {
  local file="$1"
  local type="$2"

  [ -e "$file" ] && [[ $(file -I "$file") =~ "$type" ]]
}

# SYNTAX:
# catch STDOUT_VARIABLE STDERR_VARIABLE COMMAND [ARG1[ ARG2[ ...[ ARGN]]]]
# https://stackoverflow.com/a/59592881
catch() {
  {
    IFS=$'\n' read -r -d '' "${1}";
    IFS=$'\n' read -r -d '' "${2}";
    (IFS=$'\n' read -r -d '' _ERRNO_; return ${_ERRNO_});
  } < <((printf '\0%s\0%d\0' "$(((({ shift 2; "${@}"; echo "${?}" 1>&3-; } | \
    tr -d '\0' 1>&4-) 4>&2- 2>&1- | \
    tr -d '\0' 1>&4-) 3>&1- | \
    exit "$(cat)") 4>&1-)" "${?}" 1>&2) 2>&1)
}

function extract_audio() {
  local video="$1"
  local ext=$(
    ffprobe -loglevel error \
            -select_streams a:0 \
            -show_entries stream=codec_name \
            -of csv=p=0 "$video")
  local audio="${tmp_dir}/audio.$ext"

  ffmpeg -loglevel error -i "${video}" -vn -acodec copy "${audio}"

  echo "$audio"
}

function transcribe() {
  local file="$1"

  vosk-transcriber -l en \
                   -t srt \
                   -i "$file" \
                   --log-level FATAL \
                   --model-name vosk-model-en-us-0.22

}

function print-error() {
  local errors="$1"

  echo "$errors" >&2
  echo "" >&2
  echo "Errors occurred. Aborting..." >&2
}

function help() {
  echo "Usage: $0 [-h] [-l <en|de>] [-i <input file>]"
}

function output-test() {
  echo "std"
  echo "err" >&2
}

#### Main function
while getopts ":hl:i:o:" o; do
    case "${o}" in
        l)
            lang=${OPTARG}
            ((lang == "en" || lang == "de")) || help
            ;;
        i)
            input_file=${OPTARG}
            ;;
        o)
            output_file=${OPTARG}
            ;;
        h | *)
            help
            exit 0
            ;;
    esac
done
shift $((OPTIND-1))

if [ -z "${lang}" ] || [ -z "${input_file}" ]; then
  help
  exit 1
fi

# Convert to audio if needed
if is_type "${input_file}" "video"; then
  input_file=$(extract_audio "$input_file")
fi

if is_type "${input_file}" "audio"; then
  catch text errors transcribe "${input_file}"

  if [ $? -eq 0 ] ; then
    if [ -z "${output_file}" ]; then
      echo "${text}"
    else
      echo "${text}" > "${output_file}"
      echo "Transcript written to ${output_file}"
    fi
  else
    print-error "${errors}" && exit 1
  fi
else
  print-error "Invalid file" && exit 1
fi
